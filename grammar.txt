S -> S;
S -> VAR = SVAL;
S -> VAR = none; 
S -> VAR + = SVAL; 
S -> VAR - = SVAL; 
S -> VAR * = SVAL; 
S -> VAR / = SVAL; 
S -> IF; 
S -> PRINT; 
S -> WHILE; 
S -> FOR; 
S -> DEF; 
S -> CLASS; 
S -> IMPORT; 
S -> FROM; 
S -> COMMENT; 
S -> NONE;


VAR -> variable;
SVAL -> VAR; 
SVAL -> VAL; 
SVAL -> SVAL OPERATION SVAL; 
SVAL -> INPUT; 
SVAL -> SVAL , SVAL; 
SVAL -> METHOD;
SVAL -> NONE;


VAL -> number; 
VAL -> SVAL OPERATION SVAL; 
VAL -> SVAL * * SVAL; 
VAL -> SVAL / / SVAL; 
VAL -> ( SVAL ); 
VAL -> BOOL; 
VAL -> STRING;

COMPARATION -> >; 
COMPARATION -> <;
COMPARATION -> = =;
COMPARATION -> ! =; 
COMPARATION -> < =; 
COMPARATION -> > =;

BOOL -> true;
BOOL -> false; 
BOOL -> BOOL and BOOL; 
BOOL -> BOOL or BOOL; 
BOOL -> not BOOL;
BOOL -> SVAL is SVAL;
BOOL -> SVAL COMPARATION SVAL;

OPERATION -> +; 
OPERATION -> -;  
OPERATION -> *; 
OPERATION -> /; 
OPERATION -> %;

STRING -> " string ";
STRING -> ' string ';

CONTENT -> VAR; 
CONTENT -> CONTENT CONTENT;
COMMENT -> " " " CONTENT " " ";
COMMENT -> ' ' ' CONTENT ' ' ';
INBRACKET -> ( SVAL );
INBRACKET -> ( );
PRINT -> print INBRACKET;
EXPRES -> ( BOOL ) : S;
EXPRES -> BOOL : S;
RAISE -> raise INBRACKET;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
NONE -> none = = [ number ];
NONE -> none = = [ ];

IF -> if EXPRES; 
IF -> IF ELIF; 
IF -> IF ELSE; 
IF -> IF RAISE; 
IF -> IF BREAK; 
IF -> IF PASS; 
IF -> IF CONTINUE;

ELIF -> elif EXPRES; 
ELIF -> ELIF ELIF; 
ELIF -> ELIF ELSE;
ELSE -> else : S;
TYPE -> str;
TYPE -> float;
TYPE -> int;
TYPE -> double;

INPUT -> input INBRACKET; 
INPUT -> TYPE ( INPUT );
RANGE -> range INBRACKET;
WHILE -> while EXPRES;
FOR -> for VAR in STRING : S; 
FOR -> for VAR in RANGE : S;
RETURN -> return BOOL; 
RETURN -> return VAL;
DEF -> def VAR INBRACKET : S;
DEF -> DEF RETURN;
CLASS -> class VAR : S;
IMPORT -> import VAR as VAR;
IMPORT -> import VAR;
FROM -> from VAR IMPORT;
METHOD -> len INBRACKET;
METHOD -> with open INBRACKET as VAR