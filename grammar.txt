Terminals:
( ) none , and or not true false + - * / % = < > ! is in " ' [ ] { } for : # if elif else while break continue pass def return range raise class from import as * with open
Variables:
SS HURUF ANGKA OTHER ARITH_OPERATOR INEQ NUMERIC STRING_WORD INIT_VAR VAR VALUE ANGKA VV BOOLEAN OP EXPRESSION RELATION STRING ARRAY DICTION_CONTENT DICTION BODY COMMENT IF_START IF ELIF_START ELIF ELSE WHILE WHILE_START FOR_START FOR FOR_VAR ITERABLE ITERATE CONTINUE BREAK PASS DEF_START DEF_S DEF RETURN FUNC_BODY IF_FUNC ELIF_FUNC ELSE_FUNC WHILE_FUNC FOR_FUNC WITH_FUNC ITERATE_FUNC BREAK_FUNC CONTINUE_FUNC RAISE CLASS START_CLASS CLASS_S IMP_S IMPORT WITH WITH_START
Productions:
SS -> SS SS | IF | WHILE | FOR | CLASS | DEF | IMPORT | RAISE | COMMENT | BREAK | CONTINUE | WITH | PASS | VAR = VV | VAR OP = VV | none;
HURUF -> A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z;
ANGKA -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | ANGKA;
OTHER -> $ | & | . | ? | @ | \ | ^ | ` | ~ | |;
ARITH_OPERATOR -> + | - | * | * * | / | / / | %;
INEQ -> < | >;
INIT_VAR -> HURUF | _;
NUMERIC -> NUMERIC NUMERIC | ANGKA | INIT_VAR;
START_CLASS -> class VAR : | class VAR ( VV ) : | class VAR ( ) :;
CLASS_S -> CLASS_S CLASS_S | IF | WHILE | FOR | CLASS | DEF | VAR = VV | VAR OP = VV | BREAK | CONTINUE | PASS | COMMENT;
CLASS -> START_CLASS CLASS_S;
VAR -> INIT_VAR NUMERIC | INIT_VAR;
STRING_WORD -> STRING_WORD STRING_WORD | HURUF | ANGKA | OTHER | = | INEQ = | = = | ! = | INEQ | : | , | ARITH_OPERATOR | ' | " | ( | ) | and | or | none | not | true | false | { | } | ] | [ | is | in | for | # | if | elif | else | while | break | continue | pass | def | return | range | raise | class | from | import | with | open | as;
VALUE -> ANGKA | BOOLEAN | STRING | ARRAY | DICTION | VV OP VV | ( VV ) | none;
VV -> VV , VV | VALUE | VAR;
BOOLEAN -> BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | not BOOLEAN | VV RELATION VV | true | false;
EXPRESSION -> BOOLEAN | ( BOOLEAN );
RELATION -> INEQ = | = = | ! = | INEQ | is | is not | in | not in;
STRING -> STRING STRING | " STRING_WORD " | ' STRING_WORD ';
ARRAY -> [ VV ] | [ ] | [ VV for VAR in VV ] | [ VV for VAR in RANGE ];
DICTION -> { } | { DICTION_CONTENT };
DICTION_CONTENT -> VV : VV | DICTION_CONTENT , DICTION_CONTENT;
BODY -> STRING_WORD | BODY BODY;
COMMENT -> " " " BODY " " " | ''' BODY ''' | # BODY;
IF_START -> if EXPRESSION :;
IF -> IF_START SS | IF ELIF | IF ELSE;
ELSE -> else : SS;
ELIF_START -> elif EXPRESSION :;
ELIF -> ELIF_START SS | ELIF ELIF | ELIF ELSE;
IF_FUNC -> IF_START FUNC_BODY | IF_FUNC ELIF_FUNC | IF_FUNC ELSE_FUNC;
ELIF_FUNC -> ELIF_START FUNC_BODY | ELIF_FUNC ELIF_FUNC | ELIF_FUNC ELSE_FUNC;
ELSE_FUNC -> else : FUNC_BODY;
WHILE_START -> while EXPRESSION :;
WHILE -> WHILE_START SS;
FOR_START -> for FOR_VAR in ITERABLE :;
FOR_VAR -> VAR | VAR , FOR_VAR;
ITERABLE -> range ( VV ) | ( DICTION ) | DICTION | ( ARRAY ) | ARRAY | STRING;
FOR -> FOR_START SS;
ITERATE -> FOR_START | WHILE_START | FOR | WHILE;
BREAK -> ITERATE break | ITERATE break SS;
CONTINUE -> ITERATE continue | ITERATE continue SS;
PASS -> pass;
WHILE_FUNC -> WHILE_START FUNC_BODY;
ITERATE_FUNC -> FOR_FUNC | WHILE_FUNC | WHILE_START | FOR_START;
CONTINUE_FUNC -> ITERATE_FUNC continue | ITERATE_FUNC continue FUNC_BODY;
BREAK_FUNC -> ITERATE_FUNC break | ITERATE_FUNC break FUNC_BODY;
DEF_START -> def VAR ( VV ) : | def VAR ( ) :;
DEF_S -> DEF_S DEF_S | FUNC_BODY;
FUNC_BODY -> FUNC_BODY FUNC_BODY | IF_FUNC | FOR_FUNC | WHILE_FUNC | CONTINUE_FUNC | BREAK_FUNC | CLASS | DEF | VAR = VV | VAR OP = VV | IMPORT | RAISE | WITH_FUNC | PASS | RETURN | COMMENT | none;
DEF -> DEF_START DEF_S | DEF_START FUNC_BODY;
RETURN -> return BOOLEAN | return VV | return;
FOR_FUNC -> FOR_START FUNC_BODY;
WITH_FUNC -> WITH_START FUNC_BODY;
RAISE -> raise ( VV ) | raise ( );
IMPORT -> from VAR import IMP_S | import VAR as VAR | import VAR;
IMP_S -> * | VAR as VAR | VAR;
WITH_START -> with open ( VV ) as VAR :;
WITH -> WITH_START SS