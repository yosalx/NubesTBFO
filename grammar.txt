Terminals:
( ) none , and or not true false + - * / % = < > ! is in " ' [ ] { } for : # if elif else while break continue pass def return range raise class from import as with
Variables:
SS HURUF ANGKA SYMBOL SYNTAX NUMERICAL LONG_STRING START_VAR VAR VALUE NUMBER VV BOOLEAN ARITH_OPS CONDITION COMPARE STRING ARRAY DICTIONARY_BODY DICTIONARY COMMENT START_IF IF START_ELIF ELIF ELSE WHILE START_WHILE START_FOR FOR FOR_VAR ITERATION_SYNTAX ITERATE CONTINUE BREAK START_DEF DEF_S DEF RETURN FUNC_BODY IF_FUNC ELIF_FUNC ELSE_FUNC WHILE_FUNC FOR_FUNC WITH_FUNC ITERATE_FUNC BREAK_FUNC CONTINUE_FUNC RAISE CLASS START_CLASS CLASS_S IMPORT_AS IMPORT WITH START_WITH FUNCTION INEQ
Productions:
SS -> SS SS | IF | WHILE | FOR | CLASS | DEF | IMPORT | RAISE | COMMENT | BREAK | FUNCTION | CONTINUE | WITH | pass | VAR = VV | VAR ARITH_OPS = VV | none;
HURUF -> A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z;
ANGKA -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |;
NUMBER -> NUMBER NUMBER | ANGKA;
SYMBOL -> $ | & | . | ? | @ | \ | ^ | ` | ~ | ! | # | % | ( | ) | * | + | - | , | / | : | INEQ | = | [ | ] | _ | { | } | |;
SYNTAX -> none | and | or | is | in | true | false | not | for | if | elif | else | while | break | continue | def | return | range | raise | class | from | import | as | with | pass;
START_VAR -> HURUF | _;
NUMERICAL -> NUMERICAL NUMERICAL | ANGKA | START_VAR;
INEQ -> < | >;
VAR -> START_VAR NUMERICAL | START_VAR;
VALUE -> NUMBER | BOOLEAN | STRING | ARRAY | DICTIONARY | FUNCTION | VV ARITH_OPS VV | ( VV ) | none;
VV -> VV , VV | VALUE | VAR;
LONG_STRING -> LONG_STRING LONG_STRING | HURUF | ANGKA | SYMBOL | SYNTAX;
STRING -> STRING STRING | " LONG_STRING " | ' LONG_STRING ';
BOOLEAN -> BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | not BOOLEAN | VV COMPARE VV | true | false | ( BOOLEAN ) | VAR | NUMBER | FUNCTION;
ARITH_OPS -> + | - | * | / | / / | * * | %;
CONDITION -> BOOLEAN | ( BOOLEAN );
COMPARE -> INEQ = | = = | ! = | INEQ | is | is not | in | not in;
ARRAY -> [ VV ] | [ ] | [ VV for VAR in VV ] | [ VV for VAR in RANGE ];
DICTIONARY -> { } | { DICTIONARY_BODY CBC;
DICTIONARY_BODY -> VV : VV | DICTIONARY_BODY , DICTIONARY_BODY;
COMMENT -> " " " LONG_STRING " " " | ' ' ' LONG_STRING ' ' ';
START_CLASS -> class VAR : | class VAR ( VV ) : | class VAR ( ) :;
CLASS_S -> CLASS_S CLASS_S | IF | WHILE | FOR | CLASS | DEF | FUNCTION | VAR = VV | VAR ARITH_OPS = VV | BREAK | CONTINUE | pass | COMMENT;
CLASS -> START_CLASS CLASS_S;
IMPORT -> from VAR import IMPORT_AS | import VAR as VAR | import VAR;
IMPORT_AS -> * | VAR as VAR | VAR;
START_WITH -> with FUNCTION as VAR :;
START_IF -> if CONDITION :;
IF -> START_IF SS | IF ELIF | IF ELSE | START_IF break | START_IF continue;
START_ELIF -> elif CONDITION :;
ELIF -> START_ELIF SS | ELIF ELIF | ELIF ELSE | START_ELIF break | START_ELIF continue;
ELSE -> else : SS | else : break | else : continue;
IF_FUNC -> START_IF FUNC_BODY | IF_FUNC ELIF_FUNC | IF_FUNC ELSE_FUNC;
ELIF_FUNC -> START_ELIF FUNC_BODY | ELIF_FUNC ELIF_FUNC | ELIF_FUNC ELSE_FUNC;
ELSE_FUNC -> else : FUNC_BODY;
START_WHILE -> while CONDITION :;
WHILE -> START_WHILE SS;
START_FOR -> for FOR_VAR in ITERATION_SYNTAX :;
FOR_VAR -> VAR | VAR , FOR_VAR;
ITERATION_SYNTAX -> range ( VV ) | ( DICTIONARY ) | DICTIONARY | ( ARRAY ) | ARRAY | STRING | FUNCTION;
FOR -> START_FOR SS;
ITERATE -> START_FOR | START_WHILE | FOR | WHILE;
BREAK -> ITERATE break | ITERATE break SS;
CONTINUE -> ITERATE continue | ITERATE continue SS;
FOR_FUNC -> START_FOR FUNC_BODY;
WHILE_FUNC -> START_WHILE FUNC_BODY;
ITERATE_FUNC -> FOR_FUNC | WHILE_FUNC | START_WHILE | START_FOR;
CONTINUE_FUNC -> ITERATE_FUNC continue | ITERATE_FUNC continue FUNC_BODY;
BREAK_FUNC -> ITERATE_FUNC break | ITERATE_FUNC break FUNC_BODY;
FUNCTION -> VAR ( VV ) | VAR ( );
WITH_FUNC -> START_WITH FUNC_BODY;
FUNC_BODY -> FUNC_BODY FUNC_BODY | IF_FUNC | FOR_FUNC | WHILE_FUNC | CONTINUE_FUNC | BREAK_FUNC | CLASS | DEF | VAR = VV;
FUNC_BODY -> VAR ARITH_OPS = VV | IMPORT | FUNCTION | RAISE | WITH_FUNC | pass | RETURN | COMMENT | none;
RETURN -> return BOOLEAN | return VV | return;
START_DEF -> def VAR ( VV ) : | def VAR ( ) :;
DEF_S -> DEF_S DEF_S | FUNC_BODY;
DEF -> START_DEF DEF_S | START_DEF FUNC_BODY;
RAISE -> raise FUNCTION | raise ( );
WITH -> START_WITH SS