Terminals:
! ' " = > < ( ) + : - * , / % and or variable number is not true false string if elif else print input str float int double break pass continue with open while for in range def class import as from return raise len range none
Variables:
S SVAL VAR VAL BOOL OPERATION STRING IF ELIF ELSE PRINT EXPRES COMPARATION INPUT INBRACKET TYPE WHILE FOR RANGE DEF CLASS IMPORT FROM RETURN RAISE METHOD RANGE BREAK PASS CONTINUE COMMENT CONTENT NONE

Productions:
S -> S;
S -> VAR = SVAL; 
S -> VAR + = SVAL; 
S -> VAR - = SVAL; 
S -> VAR * = SVAL; 
S -> VAR / = SVAL; 
S -> IF; 
S -> PRINT; 
S -> WHILE; 
S -> FOR; 
S -> DEF; 
S -> CLASS; 
S -> IMPORT; 
S -> FROM; 
S -> COMMENT; 
S -> ARRAY;


VAR -> variable;
SVAL -> VAR; 
SVAL -> VAL; 
SVAL -> SVAL OPERATION SVAL; 
SVAL -> INPUT; 
SVAL -> SVAL , SVAL; 
SVAL -> METHOD;


VAL -> number; 
VAL -> SVAL OPERATION SVAL; 
VAL -> SVAL * * SVAL; 
VAL -> SVAL / / SVAL; 
VAL -> ( SVAL ); 
VAL -> BOOL; 
VAL -> STRING;

COMPARATION -> >; 
COMPARATION -> <;
COMPARATION -> = =;
COMPARATION -> ! =; 
COMPARATION -> < =; 
COMPARATION -> > =;

BOOL -> true;
BOOL -> false; 
BOOL -> BOOL and BOOL; 
BOOL -> BOOL or BOOL; 
BOOL -> not BOOL;
BOOL -> SVAL is SVAL;
BOOL -> SVAL COMPARATION SVAL;

OPERATION -> +; 
OPERATION -> -;  
OPERATION -> *; 
OPERATION -> /; 
OPERATION -> %;

STRING -> " string ";
STRING -> ' string ';

CONTENT -> VAR | CONTENT CONTENT;
COMMENT -> " " " CONTENT " " " | ' ' ' CONTENT ' ' ';
INBRACKET -> ( SVAL ) | ( );
PRINT -> print INBRACKET;
EXPRES -> ( BOOL ) : S | BOOL : S;
RAISE -> raise INBRACKET;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
NONE -> none

IF -> if EXPRES; 
IF -> IF ELIF; 
IF -> IF ELSE; 
IF -> IF RAISE; 
IF -> IF BREAK; 
IF -> IF PASS; 
IF -> IF CONTINUE;

ELIF -> elif EXPRES; 
ELIF -> ELIF ELIF; 
ELIF -> ELIF ELSE;
ELSE -> else : S;
TYPE -> str;
TYPE -> float;
TYPE -> int;
TYPE -> double;

INPUT -> input INBRACKET | TYPE ( INPUT );
RANGE -> range INBRACKET;
WHILE -> while EXPRES;
FOR -> for VAR in STRING : S | for VAR in RANGE : S;
RETURN -> return BOOL | return VAL;
DEF -> def VAR INBRACKET : S | DEF RETURN;
CLASS -> class VAR : S;
IMPORT -> import VAR as VAR | import VAR;
FROM -> from VAR IMPORT;
METHOD -> len INBRACKET | with open INBRACKET as VAR